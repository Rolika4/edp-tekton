apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted

    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.

  workspaces:
    - name: source
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: "localhost"
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: EXTRA_ARGS
      description: Extra arguments to add to the go build
      default: ""
    - name: git-source-revision
      default: ""
    - name: ci-sonar-secret
      type: string
      description: name of the secret holding the CI sonar secret
      default: "sonar-ciuser-token"

  steps:
    - name: sonar-properties-create
      image: alpine/git:2.36.2
      workingDir: $(workspaces.source.path)
      script: |
        codereviewAnalysisRunDir='codereviewAnalysisRunDir'

        ls -dl "$codereviewAnalysisRunDir" || true
        if [ ! -d "$codereviewAnalysisRunDir" ]; then
           mkdir "$codereviewAnalysisRunDir"
        fi
        export LANG=en_US.utf-8
        git config --local core.quotepath false
        IFS=$'\n';
        for i in $(git diff --diff-filter=ACMR --name-only origin/$(params.git-source-revision)); do
            cp --parents "$i" "$codereviewAnalysisRunDir"/; echo "file for scanner:" "$i"/;
        done
        cp -f coverage.out "$codereviewAnalysisRunDir"/;
        if [ -f sonar-project.properties ]; then
            cp -n sonar-project.properties "$codereviewAnalysisRunDir"/
            echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> "$codereviewAnalysisRunDir"/sonar-project.properties;
            cat "$codereviewAnalysisRunDir"/sonar-project.properties
        fi
        ls -la "$codereviewAnalysisRunDir";
        cat coverage.out;

    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.5@sha256:b8c95a37025f3c13162118cd55761ea0b2a13d1837f9deec51b7b6d82c52040a #tag: 4.5
      workingDir: $(workspaces.source.path)/codereviewAnalysisRunDir/
      script: |
        sonar-scanner -X $(params.EXTRA_ARGS)
        cat .scannerwork/report-task.txt || true
      env:
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonar-secret)
              key: secret
