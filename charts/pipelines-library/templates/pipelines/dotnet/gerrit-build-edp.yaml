{{ if .Values.gerrit.enabled }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gerrit-dotnet-31-build-edp
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton.{{ .Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/dotnet-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: SONAR_URL
      default: 'http://sonar.{{ .Release.Namespace }}:9000'
      description: SonarQube url for static code analysis
      type: string
    - name: CODEBASE_NAME
      default: 'dotnet-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: dotnet-sdk-image-version
      default: 'mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16'
      description: "dotnet-sdk image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: gerrit-notify
      taskRef:
        name: gerrit-ssh-cmd
      runAfter:
        - fetch-repository
      params:
        - name: GERRIT_PORT
          value: {{ .Values.gerrit.sshPort }}
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(tasks.fetch-repository.results.commit)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds

    - name: init-values
      taskRef:
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(tasks.init-values.results.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        name: update-build-number-dotnet
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: compile
      taskRef:
        name: dotnet
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet publish $slnFilename
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        name: dotnet
      runAfter:
        - compile
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            apk add --no-cache findutils
            ls *Tests*/*.csproj | xargs -L1 dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        name: dotnet
      runAfter:
        - test
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            apk add openjdk11=11.0.16.1_p1-r0 nodejs-current=18.6.0-r0
            export PATH="$PATH:/root/.dotnet/tools"
            slnFilename=$(ls *.sln)
            dotnet tool install --global dotnet-sonarscanner --version 5.8.0
            dotnet sonarscanner begin /d:sonar.host.url=$(params.SONAR_URL) \
              /d:sonar.login=${SONAR_TOKEN} \
              /d:sonar.qualitygate.wait=true \
              /k:$(tasks.init-values.results.CODEBASEBRANCH_NAME) \
              /n:$(tasks.init-values.results.CODEBASEBRANCH_NAME) \
              /d:sonar.cs.opencover.reportsPaths=./*Tests*/*.xml
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        name: kaniko
      runAfter:
        - sonar
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(tasks.init-values.results.TENANT_NAME)/$(tasks.init-values.results.CODEBASEBRANCH_NAME):$(tasks.get-version.results.VERSION)"
        - name: REPO_NAME
          value: "$(tasks.init-values.results.TENANT_NAME)/$(tasks.init-values.results.CODEBASEBRANCH_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: push
      taskRef:
        name: dotnet
      runAfter:
        - kaniko-build
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            #slnFilename=$(ls *.sln)
            #nugetPackagesPath="/tmp/project-nupkgs/"
            #dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
            #nugetApiKey=
            #dotnet nuget push ${nugetPackagesPath} -k ${nugetApiKey} -s http://nexus:8081/repository/edp-dotnet-hosted/
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VSC_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(tasks.init-values.results.CODEBASEBRANCH_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.VERSION)
{{ end }}
