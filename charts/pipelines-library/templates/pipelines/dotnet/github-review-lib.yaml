{{ if .Values.github.enabled }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-lib-review
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton.{{ .Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/dotnet-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: SONAR_URL
      default: 'http://sonar.{{ .Release.Namespace }}:9000'
      description: SonarQube url for static code analysis
      type: string
    - name: CODEBASE_NAME
      default: 'dotnet-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: dotnet-sdk-image-version
      default: 'mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16'
      description: "dotnet-sdk image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:

    - name: github-set-pending-status
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: {{ .Values.github.webhook.existingSecret }}
        - name: GITHUB_TOKEN_SECRET_KEY
          value: {{ .Values.github.webhook.secretKeys.tokenKey }}
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: init-values
      taskRef:
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: compile
      taskRef:
        name: dotnet
      runAfter:
        - fetch-repository
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet publish $slnFilename
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        name: dotnet
      runAfter:
        - compile
      params:
        - name: BASE_IMAGE
          value: $(params.dotnet-sdk-image-version)
        - name: EXTRA_COMMANDS
          value: |
            ls *Tests*/*.csproj | while read -r file;
                do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
            done
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        name: dotnet
      runAfter:
        - test
      params:
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:0.1.0-SNAPSHOT.3'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            # /d:sonar.qualitygate.wait=true \
            dotnet sonarscanner begin /d:sonar.host.url=$(params.SONAR_URL) \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:$(tasks.init-values.results.CODEBASEBRANCH_NAME) \
              /n:$(tasks.init-values.results.CODEBASEBRANCH_NAME) \
              /d:sonar.cs.opencover.reportsPaths=./*Tests*/*.xml
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace

  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: {{ .Values.github.webhook.existingSecret }}
        - name: GITHUB_TOKEN_SECRET_KEY
          value: {{ .Values.github.webhook.secretKeys.tokenKey }}
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: {{ .Values.github.webhook.existingSecret }}
        - name: GITHUB_TOKEN_SECRET_KEY
          value: {{ .Values.github.webhook.secretKeys.tokenKey }}
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
{{ end }}
