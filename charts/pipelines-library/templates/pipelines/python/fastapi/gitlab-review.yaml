{{ if eq .Values.global.gitProvider "gitlab" }}
{{- $frameworks := list "fastapi" "flask" -}}
{{- range $framework := $frameworks }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gitlab-python-{{ $framework }}-app-review
  labels:
    {{- include "edp-tekton.labels" $ | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-{{ $.Release.Namespace }}.{{ $.Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string

    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:

{{- include "gitlab-review-start" $ | nindent 4 }}

{{- include "helm-docs" $ | nindent 4 }}

    - name: python
      taskRef:
        kind: Task
        name: python
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            # build
            python setup.py clean build install --user
            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-scanner
      runAfter:
        - python
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASEBRANCH_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASEBRANCH_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - sonar
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

{{ include "dockerbuild-verify-python" $ | nindent 4 }}

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - sonar
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

{{ include "gitlab-review-vote" $ | nindent 2 }}

---
{{- end }}
{{ end }}
