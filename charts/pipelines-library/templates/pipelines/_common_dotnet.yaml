{{- define "dotnet-6-0-build-common" -}}
- name: test
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - dotnet-build
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        ls *Tests*/*.csproj | while read -r file;
            do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
        done
  workspaces:
    - name: source
      workspace: shared-workspace

- name: sonar
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - test
  params:
    - name: BASE_IMAGE
      value: 'epamedp/tekton-dotnet:6.0.1'
    - name: EXTRA_COMMANDS
      value: |
        slnFilename=$(ls *.sln)
        dotnet sonarscanner begin /d:sonar.host.url=${SONAR_HOST_URL} \
          /d:sonar.login=${SONAR_TOKEN} \
          /d:sonar.qualitygate.wait=true \
          /k:$(params.CODEBASEBRANCH_NAME) \
          /n:$(params.CODEBASEBRANCH_NAME) \
          /d:sonar.cs.opencover.reportsPaths=./*Tests*/*.xml
        dotnet build ${sln_filename}
        dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
  workspaces:
    - name: source
      workspace: shared-workspace

- name: get-nexus-repository-url
  taskRef:
    kind: Task
    name: get-nexus-repository-url
  runAfter:
    - sonar
  params:
    - name: VERSION
      value: $(tasks.get-version.results.VERSION)
    - name: TOOL
      value: "dotnet"

- name: get-nuget-token
  taskRef:
    kind: Task
    name: get-nuget-token
  runAfter:
    - get-nexus-repository-url
  workspaces:
    - name: source
      workspace: shared-workspace

- name: push
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - get-nuget-token
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        set -x
        slnFilename=$(ls *.sln)
        nugetPackagesPath="/tmp/project-nupkgs/"
        dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
        set +x
        nugetApiKey=$(cat $(tasks.get-nuget-token.results.NUGET_TOKEN_FILE))
        dotnet nuget push ${nugetPackagesPath} -k ${nugetApiKey} -s $(tasks.get-nexus-repository-url.results.NEXUS_REPOSITORY_URL)/
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end -}}

{{- define "dotnet-6-0-review-common" -}}
- name: dotnet-build
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - fetch-repository
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        dotnet build
  workspaces:
    - name: source
      workspace: shared-workspace

- name: test
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - dotnet-build
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        ls *Tests*/*.csproj | while read -r file;
            do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
        done
  workspaces:
    - name: source
      workspace: shared-workspace

# The fetch-target-branch Task will fetch the target branch during the code-review pipeline
# because the fetch-repository Task fetches only user changes.
- name: fetch-target-branch
  taskRef:
    kind: Task
    name: git-cli
  runAfter:
    - test
  params:
    - name: GIT_USER_EMAIL
      value: edp-ci@edp.ci-user
    - name: GIT_USER_NAME
      value: edp-ci
    - name: GIT_SCRIPT
      value: |
        git fetch origin $(params.targetBranch):refs/remotes/origin/$(params.targetBranch)
  workspaces:
    - name: source
      workspace: shared-workspace
    - name: ssh-directory
      workspace: ssh-creds

- name: sonar-prepare-files
  taskRef:
    kind: Task
    name: sonar-prepare-files-dotnet
  runAfter:
    - fetch-target-branch
  params:
    - name: CODEBASE_NAME
      value: $(params.CODEBASE_NAME)
    - name: BRANCH_NAME
      value: $(params.targetBranch)
    - name: NORMALIZED_BRANCH
      value: $(tasks.init-values.results.NORMALIZED_BRANCH)
    - name: CHANGE_NUMBER
      value: $(params.changeNumber)
    - name: PATCHSET_NUMBER
      value: $(params.patchsetNumber)
  workspaces:
    - name: source
      workspace: shared-workspace

- name: sonar
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - sonar-prepare-files
  params:
    - name: BASE_IMAGE
      value: 'epamedp/tekton-dotnet:6.0.1'
    - name: EXTRA_COMMANDS
      value: |
        slnFilename=$(ls *.sln)
        # /d:sonar.qualitygate.wait=true \
        dotnet sonarscanner begin /d:sonar.host.url=${SONAR_HOST_URL} \
          /d:sonar.login=${SONAR_TOKEN} \
          /k:$(tasks.sonar-prepare-files.results.SONAR_PROJECT_KEY) \
          /n:$(tasks.sonar-prepare-files.results.SONAR_PROJECT_KEY) \
          /d:sonar.cs.opencover.reportsPaths=$(tasks.sonar-prepare-files.results.SONAR_SOURCES)/*Tests*/*.xml
        dotnet build ${sln_filename}
        dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end -}}

{{- define "dotnet-build-common" -}}
- name: test
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - compile
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        ls *Tests*/*.csproj | while read -r file;
            do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
        done
  workspaces:
    - name: source
      workspace: shared-workspace

- name: sonar
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - test
  params:
    - name: BASE_IMAGE
      value: 'epamedp/tekton-dotnet:0.1.5'
    - name: EXTRA_COMMANDS
      value: |
        slnFilename=$(ls *.sln)
        dotnet sonarscanner begin /d:sonar.host.url=${SONAR_HOST_URL} \
          /d:sonar.login=${SONAR_TOKEN} \
          /d:sonar.qualitygate.wait=true \
          /k:$(params.CODEBASEBRANCH_NAME) \
          /n:$(params.CODEBASEBRANCH_NAME) \
          /d:sonar.cs.opencover.reportsPaths=./*Tests*/*.xml
        dotnet build ${sln_filename}
        dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
  workspaces:
    - name: source
      workspace: shared-workspace

- name: get-nexus-repository-url
  taskRef:
    kind: Task
    name: get-nexus-repository-url
  runAfter:
    - sonar
  params:
    - name: VERSION
      value: $(tasks.get-version.results.VERSION)
    - name: TOOL
      value: "dotnet"

- name: get-nuget-token
  taskRef:
    kind: Task
    name: get-nuget-token
  runAfter:
    - get-nexus-repository-url
  workspaces:
    - name: source
      workspace: shared-workspace

- name: push
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - get-nuget-token
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        set -x
        slnFilename=$(ls *.sln)
        nugetPackagesPath="/tmp/project-nupkgs/"
        dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
        set +x
        nugetApiKey=$(cat $(tasks.get-nuget-token.results.NUGET_TOKEN_FILE))
        dotnet nuget push ${nugetPackagesPath} -k ${nugetApiKey} -s $(tasks.get-nexus-repository-url.results.NEXUS_REPOSITORY_URL)/
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end -}}

{{- define "dotnet-review-common" -}}
- name: compile
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - fetch-repository
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        slnFilename=$(ls *.sln)
        dotnet publish $slnFilename
  workspaces:
    - name: source
      workspace: shared-workspace

- name: test
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - compile
  params:
    - name: BASE_IMAGE
      value: $(params.image)
    - name: EXTRA_COMMANDS
      value: |
        ls *Tests*/*.csproj | while read -r file;
            do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
        done
  workspaces:
    - name: source
      workspace: shared-workspace

# The fetch-target-branch Task will fetch the target branch during the code-review pipeline
# because the fetch-repository Task fetches only user changes.
- name: fetch-target-branch
  taskRef:
    kind: Task
    name: git-cli
  runAfter:
    - test
  params:
    - name: GIT_USER_EMAIL
      value: edp-ci@edp.ci-user
    - name: GIT_USER_NAME
      value: edp-ci
    - name: GIT_SCRIPT
      value: |
        git fetch origin $(params.targetBranch):refs/remotes/origin/$(params.targetBranch)
  workspaces:
    - name: source
      workspace: shared-workspace
    - name: ssh-directory
      workspace: ssh-creds

- name: sonar-prepare-files
  taskRef:
    kind: Task
    name: sonar-prepare-files-dotnet
  runAfter:
    - fetch-target-branch
  params:
    - name: CODEBASE_NAME
      value: $(params.CODEBASE_NAME)
    - name: BRANCH_NAME
      value: $(params.targetBranch)
    - name: NORMALIZED_BRANCH
      value: $(tasks.init-values.results.NORMALIZED_BRANCH)
    - name: CHANGE_NUMBER
      value: $(params.changeNumber)
    - name: PATCHSET_NUMBER
      value: $(params.patchsetNumber)
  workspaces:
    - name: source
      workspace: shared-workspace

- name: sonar
  taskRef:
    kind: Task
    name: dotnet
  runAfter:
    - sonar-prepare-files
  params:
    - name: BASE_IMAGE
      value: 'epamedp/tekton-dotnet:0.1.5'
    - name: EXTRA_COMMANDS
      value: |
        slnFilename=$(ls *.sln)
        # /d:sonar.qualitygate.wait=true \
        dotnet sonarscanner begin /d:sonar.host.url=${SONAR_HOST_URL} \
          /d:sonar.login=${SONAR_TOKEN} \
          /k:$(tasks.sonar-prepare-files.results.SONAR_PROJECT_KEY) \
          /n:$(tasks.sonar-prepare-files.results.SONAR_PROJECT_KEY) \
          /d:sonar.cs.opencover.reportsPaths=$(tasks.sonar-prepare-files.results.SONAR_SOURCES)/*Tests*/*.xml
        dotnet build ${sln_filename}
        dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end -}}

{{- define "build-pipeline-dotnet-image-build-push-common" -}}
{{- if eq .Values.global.dockerRegistry.type "ecr" }}
- name: create-ecr-repository
  taskRef:
    kind: Task
    name: create-ecr-repository
  runAfter:
    - dotnet-publish
  params:
    - name: REPO_NAME
      value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(params.CODEBASE_NAME)"

- name: kaniko-build
  taskRef:
    kind: Task
    name: kaniko
  runAfter:
    - create-ecr-repository
  params:
    - name: IMAGE
      value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(params.CODEBASE_NAME):$(tasks.get-version.results.IS_TAG)"
    - name: IMAGE_TAR
      value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
    - name: KANIKO_CACHE_REPO
      value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/kaniko-cache"
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end }}

{{- if or (eq .Values.global.dockerRegistry.type "harbor") (eq .Values.global.dockerRegistry.type "dockerhub") }}
- name: kaniko-build
  taskRef:
    kind: Task
    name: kaniko
  runAfter:
    - dotnet-publish
  params:
    - name: IMAGE
      value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(params.CODEBASE_NAME):$(tasks.get-version.results.IS_TAG)"
    - name: IMAGE_TAR
      value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
    - name: KANIKO_CACHE_REPO
      value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/kaniko-cache"
  workspaces:
    - name: source
      workspace: shared-workspace
{{- end }}
{{- end -}}
