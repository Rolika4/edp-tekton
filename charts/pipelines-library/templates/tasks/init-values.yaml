apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: init-values
spec:
  params:
    - name: CODEBASE_NAME
      type: string
      description: Codebasebranch name.
      default: "CODEBASE_NAME_placeholder"
    - name: BRANCH_NAME
      type: string
      description: Branch name.
      default: "BRANCH_placeholder"
    - name: BASE_IMAGE
      description: The base image for the task.
      type: string
      default: bitnami/kubectl:1.25.2
  results:
    - name: DOCKER_REGISTRY_HOST
      description: "docker host url"
    - name: TENANT_NAME
      description: "edp name"
    - name: CODEBASEBRANCH_NAME
      description: "codebase branch name"
    - name: VERSIONING_TYPE
      description: "Versioning type of codebase"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Regexp pattern for commit-validation"
    - name: NORMALIZED_BRANCH
      description: "Branch name without '/' symbols and lowercase"
    - name: RESULT_IMAGE_NAME
      description: "Codebase name with only letters and dashes"
  steps:
    - name: get-values
      image: $(params.BASE_IMAGE)
      env:
        - name: CODEBASE
          value: "$(params.CODEBASE_NAME)"
        - name: BRANCH
          value: "$(params.BRANCH_NAME)"
      script: |
        #!/usr/bin/env bash
        set -e

        dockerRegistryHost=$(kubectl get edpcomponent docker-registry -o jsonpath='{.spec.url}')
        echo "${dockerRegistryHost}" | tr -d '\n' | tee $(results.DOCKER_REGISTRY_HOST.path)

        tenantName=$(kubectl get cm edp-config -o jsonpath='{.data.edp_name}')
        echo "${tenantName}" | tr -d '\n' | tee $(results.TENANT_NAME.path)

        normalizedBranch=$(echo ${BRANCH//[^\(?!.)a-zA-Z0-9]/-} | tr '[:upper:]' '[:lower:]')
        printf "%s" "${normalizedBranch}" > "$(results.NORMALIZED_BRANCH.path)"

        echo "${CODEBASE}-${normalizedBranch}" | tr -d "\n" | tee $(results.CODEBASEBRANCH_NAME.path)

        resultImageName="${CODEBASE}-$(echo ${BRANCH//[^a-zA-Z0-9]/-} | tr '[:upper:]' '[:lower:]')"
        printf "%s" "${resultImageName}" > "$(results.RESULT_IMAGE_NAME.path)"

        versioningType=$(kubectl get codebase.v2.edp.epam.com ${CODEBASE} -o txt --output=jsonpath='{.spec.versioning.type}')
        echo "${versioningType}" | tr -d '\n' | tee $(results.VERSIONING_TYPE.path)

        commitMessagePattern=$(kubectl get codebase.v2.edp.epam.com ${CODEBASE} -o txt --output=jsonpath='{.spec.commitMessagePattern}')
        printf "%s" "${commitMessagePattern}" > "$(results.COMMIT_MESSAGE_PATTERN.path)"
