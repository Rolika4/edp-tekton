{{- if or (eq .Values.global.platform "kubernetes") (eq .Values.global.dockerRegistry.type "harbor") (eq .Values.global.dockerRegistry.type "dockerhub") }}
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/based-on: "0.6"
    {{- include "edp-tekton.labels" . | nindent 4 }}
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: codebase-name
      description: Name of codebase
    - name: image-tag
      description: Image tag
    - name: image-tar
      description: Name (reference) of the image tar.
      default: "image_tar"
    - name: dockerfile
      description: Dockerfile name.
      default: "Dockerfile"
    - name: context
      description: The build context used by Kaniko.
      default: ./
    - name: builder-image
      description: The image on which builds will run
      default: {{ .Values.kaniko.image.repository }}:{{ .Values.kaniko.image.tag }}-debug
    - name: kaniko-cache-path
      description: The repo where Kaniko stores cached image layers
      default: ""
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
  volumes:
    - name: dockerconfig
      secret:
        secretName: kaniko-docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
        optional: true
{{- if .Values.kaniko.customCert }}
    - name: ca
      secret:
        items:
          - key: ca.crt
            path: ca.crt
        secretName: custom-ca-certificates
{{- end }}
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: init-repository
      image: amazon/aws-cli:2.7.35
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
        - name: CONTAINER_REGISTRY_GROUP
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
      script: |
          if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
            aws ecr describe-repositories --repository-names "${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}" || aws ecr create-repository --repository-name "${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}";
          else
            echo 'Registry not ECR, stage skipped';
          fi

    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: "$(params.builder-image)"
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: IMAGE_TAR
          value: "$(params.image-tar)"
        - name: DOCKERFILE
          value: "$(params.dockerfile)"
        - name: CONTEXT
          value: "$(params.context)"
        - name: KANIKO_CACHE_PATH
          value: "$(params.kaniko-cache-path)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_GROUP
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
      script: |
        if [ -z "$KANIKO_CACHE_PATH" ]; then
          CACHE=false;
        else
          CACHE=true;
        fi

        /kaniko/executor \
          --dockerfile=$(workspaces.source.path)/${DOCKERFILE} \
          --context=$(workspaces.source.path)/${CONTEXT} \
          --destination=${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}:${IMAGE_TAG} \
          --digest-file=$(results.IMAGE_DIGEST.path) \
          --tar-path=${IMAGE_TAR}.tar \
          --cache=${CACHE} \
          --cache-repo=${CONTAINER_REGISTRY_URL}/${KANIKO_CACHE_PATH} \
          {{- if .Values.kaniko.customCert }}
          --registry-certificate={{ .Values.global.dockerRegistry.url }}=/kaniko/.custom-certs/ca.crt
          {{- end }}
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: dockerconfig
          mountPath: /kaniko/.docker
      {{- if .Values.kaniko.customCert }}
        - name: ca
          mountPath: /kaniko/.custom-certs
      {{- end }}
{{- include "resources" . | nindent 6 }}
    - image: alpine:3.18.3
      name: write-url
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
      script: |
        set -e
        echo -n "${CODEBASE_NAME}/${IMAGE_TAG}" | tee "$(results.IMAGE_URL.path)"
{{- end }}
