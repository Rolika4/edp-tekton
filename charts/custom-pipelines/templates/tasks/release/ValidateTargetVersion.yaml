apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-target-version
  labels:
    app.kubernetes.io/version: "0.3"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  params:
    - name: version
      description: "For example: release/2.10"
      type: string
    - name: git-source-url
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
      type: string
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  steps:
    - name: validate-target-version
      image: $(params.base_image)
      env:
        - name: VERSION
          value: "$(params.version)"
        - name: GIT_SOURCE_URL
          value: $(params.git-source-url)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -e

        EDP_VERSION_PATTERN="^([0-9]{1,2}[.][0-9]{1,2}[.]([0-9]{1,2}))$"

        if ! echo "${VERSION}" | egrep -q "${EDP_VERSION_PATTERN}"; then
            echo "![TEKTON][DEBUG] !! Malformed EDP version value: '${VERSION}', must match '${EDP_VERSION_PATTERN}'" >&2
            exit 1
        fi

        cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
        chmod 700 "${PARAM_USER_HOME}"/.ssh
        chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        eval $(ssh-agent -s)
        ssh-add "${PARAM_USER_HOME}"/.ssh/id_rsa

        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

        if git ls-remote ${GIT_SOURCE_URL} refs/tags/v${VERSION} | grep -q -E "${VERSION}"; then
            echo "[TEKTON][DEBUG] !! Target version tag '${VERSION}' already exists in remote '${GIT_SOURCE_URL}'" >&2
            exit 1
        fi

        echo "[TEKTON][DEBUG] Done"

{{- include "resources" . | nindent 6 }}
