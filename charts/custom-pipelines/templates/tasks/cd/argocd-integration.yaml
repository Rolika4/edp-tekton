apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: argo-cd-integration
spec:
  params:
    - name: PIPELINE
      description: EDP kind:CDPipeline name used for deployment.
      type: string
      default: ""
    - name: STAGE
      description: EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values.
      type: string
      default: ""
    - name: KUBECONFIG_SECRET_NAME
      type: string
      default: "kubeconfig"
  volumes:
    - name: kubeconfig
      secret:
        secretName: $(params.KUBECONFIG_SECRET_NAME)
        optional: true
  steps:
    - name: argo-cd-integration
      image: bitnami/kubectl:1.25.4
      volumeMounts:
        - name: kubeconfig
          mountPath: /workspace/source/kube
      env:
        - name: PIPELINE
          value: "$(params.PIPELINE)"
        - name: STAGE
          value: "$(params.STAGE)"
      script: |
        #!/bin/bash
        set -ex

        kubeconfig="workspace/source/kube/config"

        TARGET_NAMESPACE=$(kubectl get stages ${PIPELINE}-${STAGE} -o jsonpath='{.spec.namespace}')

        if [ -f "$kubeconfig" ]; then
            echo "Kubeconfig exists: $kubeconfig, use it"
            export KUBECONFIG=$kubeconfig
        else
            echo "Kubeconfig does not exist, working on current cluster"
        fi

        # Wait when gerrit deployment is ready
        kubectl wait -n ${TARGET_NAMESPACE} gerrit.v2.edp.epam.com --all '--for=jsonpath={.status.status}=ready' --timeout 400s

        # Get current known hosts from argocd config map

        kubectl get cm argocd-ssh-known-hosts-cm -n argocd -o jsonpath='{.data.ssh_known_hosts}' > /tmp/ssh_known_hosts

        # Get known hosts from gerrit pod

        gerritPort=$(kubectl get gerrit gerrit -n ${TARGET_NAMESPACE} -o jsonpath='{.spec.sshPort}')
        kubectl exec -it deployment/gerrit -n ${TARGET_NAMESPACE} -- ssh-keyscan -p ${gerritPort} gerrit.${TARGET_NAMESPACE} >> /tmp/ssh_known_hosts

        # Set gerrit url for ARGOCD
        gerritUrl=$(echo -n "ssh://edp-ci@gerrit.${TARGET_NAMESPACE}:${gerritPort}" | base64 -w0)

        # copy secret to argocd ns
        SECRET=$(kubectl get secret gerrit-argocd-sshkey -n ${TARGET_NAMESPACE} -o json)
        SECRET=$(echo ${SECRET} | jq 'del(.data.username,.metadata.annotations,.metadata.creationTimestamp,.metadata.labels,.metadata.resourceVersion,.metadata.uid,.metadata.ownerReferences)')
        SECRET=$(echo ${SECRET} | jq '.metadata.namespace = "argocd"')
        SECRET=$(echo ${SECRET} | jq --arg name "${TARGET_NAMESPACE}" '.metadata.name = $name')
        SECRET=$(echo ${SECRET} | jq --arg url "${gerritUrl}" '.data.url = $url')
        SECRET=$(echo ${SECRET} | jq '.data.sshPrivateKey = .data.id_rsa')
        SECRET=$(echo ${SECRET} | jq 'del(.data.id_rsa,.data."id_rsa.pub")')

        echo ${SECRET} | kubectl apply -f -

        # Create configmap with known hosts
        kubectl create configmap argocd-ssh-known-hosts-cm -n argocd --from-file /tmp/ssh_known_hosts -o yaml --dry-run=client | kubectl apply -f -

        # Add argocd label to secret
        kubectl label --overwrite secret ${TARGET_NAMESPACE} -n argocd "argocd.argoproj.io/secret-type=repo-creds"

        rm -f /tmp/ssh_known_hosts
