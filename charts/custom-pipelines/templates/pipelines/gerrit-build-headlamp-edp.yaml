{{ if eq .Values.global.gitProvider "gerrit" }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gerrit-npm-other-app-build-edp
  labels:
    {{- include "edp-custom-pipelines.labels" . | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-{{ .Release.Namespace }}.{{ .Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'docker.io/library/node:18.17.0-alpine3.18'
      description: "npm image version"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:

{{- include "gerrit-build-start" . | nindent 4 }}

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace

{{ include "sonar-cleanup" . | nindent 4 }}

    - name: npm-init
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            npm set registry http://nexus:8081/repository/edp-npm-group/ --location project
            npm set //nexus:8081/repository/edp-npm-group/:email edp-ci@edp.local --location project
            npm set //nexus:8081/repository/edp-npm-group/:_auth $upBase64 --location project
            npm ci
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - npm-init
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            npm run build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            npm run test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-scanner
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASEBRANCH_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASEBRANCH_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: create-ecr-repository
      taskRef:
        kind: Task
        name: create-ecr-repository
      runAfter:
        - sonar
      params:
        - name: REPO_NAME
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(params.CODEBASE_NAME)"

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - create-ecr-repository
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(params.CODEBASE_NAME):$(tasks.get-version.results.IS_TAG)"
        - name: KANIKO_CACHE_REPO
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: ECR_HOST
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)"
        - name: ECR_IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(tasks.init-values.results.TENANT_NAME)/$(params.CODEBASE_NAME)"
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"


    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)

{{ include "finally-block-edp" . | nindent 2 }}

{{ include "send-to-microsoft-teams-build" . | nindent 4 }}

{{ end }}
